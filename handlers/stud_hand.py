import asyncio
from contextlib import suppress

from aiogram import types,Router,F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters.command import Command
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

from db.db import if_fav_stud, add_fav_stud, if_notif, swith_evd, swith_evw, swith_evl
from tools.lists import groups

#–∏–º–ø–æ—Ä—Ç –∫–Ω–æ–ø–æ–∫
from buttons.stud_buts import *
from tools.scheld_stud import scheld_today, scheld_tomorrow, scheld_next_week, scheld_week

#—Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–∞—Ç—á–µ—Ä–∞
us_rout = Router()



#–≥–ª–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞
@us_rout.callback_query(F.data =="stud_mod")
@us_rout.message(Command('stud'))
async def main_stud(query: types.Message | types.CallbackQuery, state: FSMContext):
    if isinstance(query, types.Message):
        # –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞
        message = query
    else:
        # –≠—Ç–æ callback-–∑–∞–ø—Ä–æ—Å
        message = query.message
    await message.answer(text='–ü—Ä–∏–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç\n–†–∞–¥—É–π—Å—è –∂–∏–∑–Ω–∏ –ø–æ–∫–∞ –Ω–µ –æ—Ç—á–∏—Å–ª–∏–ª–∏.',
                                  reply_markup=main_stud_buts.as_markup())
    await state.clear()
    # await callback.message.delete() #—Ç–µ–ø–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞ —É–¥–∞–ª—è–µ—Ç—Å—è


##################################### fsm –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–ø–∏—Å–∞–Ω–∏—è ##########################################
class get_scheld(StatesGroup):
    group = State()
    date = State()
    fav = State()
    ntf = State()

#–≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@us_rout.callback_query(StateFilter(None),F.data == "scheld")
async def scheld_group(callback: types.CallbackQuery, state: FSMContext):
    r = await if_fav_stud(callback.from_user.id)
    if r == False or r == "No":
        await callback.message.answer(text='–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ,—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã —Å–Ω–∏–∑—É.'
                                           '\n–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫: '
                                           '\n—Ü–∏—Å-16 –∏–ª–∏ —Å–∞—Ä-44',reply_markup=scheld_buts.as_markup(resize_keyboard=True))
        await state.set_state(get_scheld.group)
    else:
        await callback.message.answer(text=f'–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ {r}.',
                                      reply_markup=scheld_buts.as_markup(resize_keyboard=True))
        await state.set_state(get_scheld.group)
        await scheld_date(callback.message,state,group = r)

@us_rout.message(get_scheld.group,F.text)
async def scheld_date(message: Message, state: FSMContext,group=False):
    if group:
        await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É',
                             reply_markup=scheld_date_buts.as_markup(resize_keyboard=True))
        await state.set_state(get_scheld.date)
        await state.update_data(group=group)
    elif message.text.lower() in await groups():
        await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É',
                             reply_markup=scheld_date_buts.as_markup(resize_keyboard=True))
        await state.set_state(get_scheld.date)
        await state.update_data(group = message.text.lower())
    else:
        await message.answer(text='–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç')
        await state.set_state(get_scheld.group)

# @us_rout.message(get_scheld.date,F.text)
# async def take_date(message: Message, state: FSMContext):
#     await message.answer(text='–î–∞—Ç–∞ –∏ –≥—Ä—É–ø–ø–∞ –ø—Ä–∏–Ω—è—Ç—ã.',reply_markup=types.ReplyKeyboardRemove())
#     await state.update_data(date = message.text.lower())
#     await state.set_state(get_scheld.scheld)

@us_rout.message(get_scheld.date)
async def scheld(message: Message, state: FSMContext):
    data =await state.get_data()
    group = data['group']
    date = message.text.lower()
    await message.answer(text='–î–∞—Ç–∞ –∏ –≥—Ä—É–ø–ø–∞ –ø—Ä–∏–Ω—è—Ç—ã.', reply_markup=types.ReplyKeyboardRemove())
    if date == '—Å–µ–≥–æ–¥–Ω—è':
        sch = await scheld_today(group)
        if not((sch ==0) or (sch == None)):
            lessons = "".join([f"{i['originalTimeTitle']} | {i['lessonName']}\n{i['auditoryName']} | {'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' if i['teacherName'] is None else i['teacherName']}\n" for i in sch['lessons']])
            sch_ = f"{sch['info']['name']}\n–ü–∞—Ä—ã –Ω–∞ –¥–µ–Ω—å:\n"+lessons
        else:
            sch_ = "–Ω–∞ —Ä–∞—Å—Å–ª–∞–±–æ–Ω–µüéÜ"
        # print(sch_)
    elif date == '–∑–∞–≤—Ç—Ä–∞':
        sch = await scheld_tomorrow(group)
        if not((sch ==0) or (sch == None)):
            lessons = "".join([f"{i['originalTimeTitle']} | {i['lessonName']}\n{i['auditoryName']} | {'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' if i['teacherName'] is None else i['teacherName']}\n" for i in sch['lessons']])
            sch_ = f"{sch['info']['name']}\n–ü–∞—Ä—ã –Ω–∞ –¥–µ–Ω—å:\n"+lessons
        else:
            sch_ = "–Ω–∞ —Ä–∞—Å—Å–ª–∞–±–æ–Ω–µüéÜ"
        # print(sch_)
    elif date == '—ç—Ç–∞ –Ω–µ–¥–µ–ª—è':
        sch = await scheld_week(group)
        if not((sch ==0) or (sch == None)):
            res = []
            for j in sch:
                lessons = "".join([f"{i['originalTimeTitle']} | {i['lessonName']}\n{i['auditoryName']} | {'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' if i['teacherName'] is None else i['teacherName']}\n" for i in j['lessons']])
                k = f"{j['info']['name']}\n–ü–∞—Ä—ã –Ω–∞ –¥–µ–Ω—å:\n"+lessons
                res.append(k)
            sch_ = "".join(res)
        else:
            sch_ = "–Ω–∞ —Ä–∞—Å—Å–ª–∞–±–æ–Ω–µüéÜ"
        # print(sch_)
    elif date == 'c–ª–µ–¥ –Ω–µ–¥–µ–ª—è':
        sch = await scheld_next_week(group)
        if not((sch ==0) or (sch == None)):
            res = []
            for j in sch:
                lessons = "".join([f"{i['originalTimeTitle']} | {i['lessonName']}\n{i['auditoryName']} | {'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' if i['teacherName'] is None else i['teacherName']}\n" for i in j['lessons']])
                k = f"{j['info']['name']}\n–ü–∞—Ä—ã –Ω–∞ –¥–µ–Ω—å:\n" + lessons
                res.append(k)
            sch_ = "".join(res)
        else:
            sch_ = "–Ω–∞ —Ä–∞—Å—Å–ª–∞–±–æ–Ω–µüéÜ"
        # print(sch_)
        # print(sch_)
    if await if_fav_stud(message.from_user.id) == False:
        await message.answer(
            text=sch_
        )
        await message.answer(
            text="–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?\n"
                 "–ì—Ä—É–ø–ø—É –Ω–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
                 "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            reply_markup=fav_.as_markup(resize_keyboard=True)
        )
        await state.set_state(get_scheld.fav)
    else:
        await message.answer(
            text=sch_, reply_markup=scheld_buts.as_markup(resize_keyboard=True)
        )
        await state.clear()



@us_rout.message(get_scheld.fav)
async def fav(message: Message, state: FSMContext):
    answ = message.text
    data = await state.get_data()
    group = data['group']
    await message.answer(text='–ü–æ–Ω—è–ª', reply_markup=types.ReplyKeyboardRemove())
    if answ == '–î–∞)':
        await message.answer(text="–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ!", reply_markup=scheld_buts.as_markup(resize_keyboard=True))

        await add_fav_stud(message.from_user.id,group)

        us = await if_notif(message.from_user.id)  # [False,True,False]
        # –§–∞–≤–æ—Ä–∏—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        ntf_ = InlineKeyboardBuilder()
        ntf_.row(InlineKeyboardButton(text=('‚ùå' if us[0] == False else '‚úÖ') + '–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é', callback_data="evw"))
        ntf_.row(InlineKeyboardButton(text=('‚ùå' if us[1] == False else '‚úÖ') + '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å', callback_data="evd"))
        ntf_.add(InlineKeyboardButton(text=('‚ùå' if us[2] == False else '‚úÖ') + '–ö–∞–∂–¥—É—é –ø–∞—Ä—É', callback_data="evl"))
        ntf_.row(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data="scheld_buts"))

        await message.answer(text='–•–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?\n'
                                  '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:', reply_markup=ntf_.as_markup(resize_keyboard=True))
        await state.clear()
        # await state.set_state(get_scheld.ntf)
    elif answ == "–ù–µ—Ç(":
        await message.answer(text="–•–æ—Ä–æ—à–æ(\n"
                                  "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n"
                                  "–¢–∞–∫–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                             reply_markup=scheld_buts.as_markup(resize_keyboard=True))

        await add_fav_stud(message.from_user.id, "No")
        # await state.set_state(get_scheld.ntf)

# @us_rout.message(get_scheld.ntf)
# async def ntf(message: Message, state: FSMContext):
#     us =await if_notif(message.from_user.id) # [False,True,False]
#     # –§–∞–≤–æ—Ä–∏—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
#     ntf_ = InlineKeyboardBuilder()
#     ntf_.row(InlineKeyboardButton(text=('‚ùå'if us[0]==False else '‚úÖ')+'–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é', callback_data="evw"))
#     ntf_.row(InlineKeyboardButton(text=('‚ùå'if us[1]==False else '‚úÖ')+'–ö–∞–∂–¥—ã–π –¥–µ–Ω—å', callback_data="evd"))
#     ntf_.add(InlineKeyboardButton(text=('‚ùå'if us[2]==False else '‚úÖ')+'–ö–∞–∂–¥—É—é –ø–∞—Ä—É', callback_data="evl"))
#     ntf_.row(InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data="scheld_buts"))
#
#     await message.answer(text='–•–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?\n'
#                               '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:', reply_markup=ntf_.as_markup(resize_keyboard=True))
#     await state.clear()


@us_rout.callback_query(lambda query: query.data in ['evw', 'evd', 'evl'])
async def ev_n(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    us = await if_notif(user_id)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
    if callback.data == "evw":
            if us[0] == False:
                await swith_evw(callback.from_user.id,'on')
                us[0] = True
            else:
                await swith_evw(callback.from_user.id, 'off')
                us[0] = False
    elif callback.data == "evd":
            if us[1] == False:
                await swith_evd(callback.from_user.id, 'on')
                us[1] = True
            else:
                await swith_evd(callback.from_user.id, 'off')
                us[1] = False
    elif callback.data == "evl":
            if us[2] == False:
                await swith_evl(callback.from_user.id, 'on')
                us[2] = True
            else:
                await swith_evl(callback.from_user.id, 'off')
                us[2] = False
    us = await if_notif(user_id)
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —É—á–µ—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–π us
    ntf_ = InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=('‚ùå' if not us[0] else '‚úÖ') + '–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é', callback_data="evw")],[
         types.InlineKeyboardButton(text=('‚ùå' if not us[1] else '‚úÖ') + '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å', callback_data="evd"),
        types.InlineKeyboardButton(text=('‚ùå' if not us[2] else '‚úÖ') + '–ö–∞–∂–¥—É—é –ø–∞—Ä—É', callback_data="evl")],
        [InlineKeyboardButton(text='–í –º–µ–Ω—é', callback_data="scheld_buts")]
    ], )

    await callback.message.edit_text(text='–•–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?\n'
                                 '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ', reply_markup=ntf_)



##################################### fsm –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–ø–∏—Å–∞–Ω–∏—è ##########################################



@us_rout.callback_query(F.data == "departments")
async def departments(callback: types.CallbackQuery):
        await callback.message.answer(text='–ö–∞—Ñ–µ–¥—Ä—ã:',
                                      reply_markup=departments_buts.as_markup(resize_keyboard=True))
        await callback.message.delete()

@us_rout.callback_query(F.data == "news")
async def news(callback: types.CallbackQuery):
        await callback.message.answer(text='–ù–æ–≤–æ—Å—Ç–∏:',
                                      reply_markup=news_buts.as_markup(resize_keyboard=True))
        await callback.message.delete()

@us_rout.callback_query(F.data == "institutes")
async def institutes(callback: types.CallbackQuery):
        await callback.message.answer(text='–ò–Ω—Å—Ç–∏—Ç—É—Ç—ã:',
                                      reply_markup=institutes_buts.as_markup(resize_keyboard=True))
        await callback.message.delete()

@us_rout.callback_query(F.data == "soc_net")
async def soc_net(callback: types.CallbackQuery):
    await callback.message.answer(text='–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:',
                                  reply_markup=socnet_buts.as_markup(resize_keyboard=True))
    await callback.message.delete()

